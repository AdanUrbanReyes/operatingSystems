***********************************************************************************************Exercise 2.16***********************************************************************************************
#include <stdio.h>
int main(){
	float oneNumber,twoNumber;
	printf("enter two numbers\n");
	scanf("%f",&oneNumber);
	scanf("%f",&twoNumber);
	printf("%g+%g=%g\n",oneNumber,twoNumber,(oneNumber+twoNumber));
	printf("%g-%g=%g\n",oneNumber,twoNumber,(oneNumber-twoNumber));
	printf("%g-%g=%g\n",twoNumber,oneNumber,(twoNumber-oneNumber));
	printf("%g*%g=%g\n",oneNumber,twoNumber,(oneNumber*twoNumber));
	printf("%g/%g=%g\n",oneNumber,twoNumber,(oneNumber/twoNumber));
	printf("%g/%g=%g\n",twoNumber,oneNumber,(twoNumber/oneNumber));
	printf("%d %% %d=%d\n",(int)oneNumber,(int)twoNumber,(int)oneNumber%(int)twoNumber);
	printf("%d %% %d=%d\n",(int)twoNumber,(int)oneNumber,(int)twoNumber%(int)oneNumber);
	return 0;
}
***********************************************************************************************Exercise 2.18***********************************************************************************************
#include <stdio.h>
#include <stdlib.h>
#define numbersToReceive 2
int *getGreaterLowerNumber(int *numbers,int size){
	if(size==0)
		return NULL;
	int i,*greaterLowerNumber;
	greaterLowerNumber=(int *)malloc(sizeof(int)*2);//this array contains number greater(index 0) and number lower index(1)
	*(greaterLowerNumber+0)=*(greaterLowerNumber+1)=*(numbers+0);
	for(i=0;i<size;i++){
		if(*(greaterLowerNumber+0)<*(numbers+i)){
			*(greaterLowerNumber+0)=*(numbers+i);//put as greater number
		}
		if(*(greaterLowerNumber+1)>*(numbers+i)){
			*(greaterLowerNumber+1)=*(numbers+i);//put as lower number
		}
	}
	return greaterLowerNumber;
}
int main(){
	int i,*greaterLowerNumber,*numbers=(int *)malloc(sizeof(int)*numbersToReceive);
	printf("enter %d numbers\n",numbersToReceive);
	for(i=0;i<numbersToReceive;i++){
		scanf("%d",(numbers+i));
	}
	greaterLowerNumber=getGreaterLowerNumber(numbers,numbersToReceive);
	if(*(greaterLowerNumber+0)==*(greaterLowerNumber+1)){
		printf("these numbers are equals\n");
		return 0;
	}
	printf("%d is larger\n",*(greaterLowerNumber+0));
	return 0;
}
***********************************************************************************************Exercise 2.19***********************************************************************************************
#include <stdio.h>
#include <stdlib.h>
#define numbersToReceive 3
int *getGreaterLowerNumber(int *numbers,int size){
	if(size==0)
		return NULL;
	int i,*greaterLowerNumber;
	greaterLowerNumber=(int *)malloc(sizeof(int)*2);//this array contains number greater(index 0) and number lower index(1)
	*(greaterLowerNumber+0)=*(greaterLowerNumber+1)=*(numbers+0);
	for(i=0;i<size;i++){
		if(*(greaterLowerNumber+0)<*(numbers+i)){
			*(greaterLowerNumber+0)=*(numbers+i);//put as greater number
		}
		if(*(greaterLowerNumber+1)>*(numbers+i)){
			*(greaterLowerNumber+1)=*(numbers+i);//put as lower number
		}
	}
	return greaterLowerNumber;
}
unsigned char areNumbersDistinct(int *numbers,int size){//return 0 (true) if array contains numbers equals else return 1
	int i,j;
	for(i=0;i<size;i++){
		for(j=i+1;j<size;j++){
			if(*(numbers+i)==*(numbers+j))
				return 0;
		}
	}
	return 1;
}
int plusIntegers(int *numbers,int size){
	if(size==0)
		return 0;
	int i,plus=0;
	for(i=0;i<size;i++){
		plus+=*(numbers+i);
	}
	return plus;
}
float averageIntegers(int *numbers,int size){
	if(size==0)
		return 0;
	int plus=plusIntegers(numbers,size);
	return (plus/size);
}
int productIntegers(int *numbers,int size){
	if(size==0)
		return 0;
	int i,product=1;
	for(i=0;i<size;i++){
		product*=*(numbers+i);
	}
	return product;
}
void printIntegerArray(int *numbers,int size,char separator){
	int i;
	for(i=0;i<size;i++){
		printf("%d%c",*(numbers+i),separator);
	}
}
int main(){
	int i,*greaterLowerNumber,*numbers=(int *)malloc(sizeof(int)*numbersToReceive);
	printf("enter %d numbers\n",numbersToReceive);
	for(i=0;i<numbersToReceive;i++){
		scanf("%d",(numbers+i));
	}
	if(!areNumbersDistinct(numbers,numbersToReceive)){
		printf("please enter numbers distinct\n");
		return -1;
	}
	printf("Input three different integers: ");
	printIntegerArray(numbers,numbersToReceive,' ');
	printf("\nSum is %d\n",plusIntegers(numbers,numbersToReceive));
	printf("Average is %f\n",averageIntegers(numbers,numbersToReceive));
	printf("Product is %d\n",productIntegers(numbers,numbersToReceive));
	greaterLowerNumber=getGreaterLowerNumber(numbers,numbersToReceive);
	printf("Smallest is %d\n",*(greaterLowerNumber+1));
	printf("Largerst is %d\n",*(greaterLowerNumber+0));
	return 0;
}
***********************************************************************************************Exercise 2.20***********************************************************************************************
#include <stdio.h>
#include <math.h>
#define PI 3.14159
//compilar as gcc file.c -lm
int main(){
	float radius;
	printf("enter circle radius\n");
	scanf("%f",&radius);
	printf("circle diameter is %f\n",radius*2);
	printf("circle circunference is %f\n",PI*radius);
	printf("circle area is %f\n",PI*pow(radius,2));
	return 0;
}
***********************************************************************************************Exercise 2.24***********************************************************************************************
#include <stdio.h>
int main(){
	int number;
	printf("enter number\n");
	scanf("%d",&number);
	if(number%2==0)
		printf("%d is par\n",number);
	else
		printf("%d is odd\n",number);
	return 0;
}
***********************************************************************************************Exercise 2.30***********************************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define digits 5
int main(){
	int i,number,digitsInNumber=0;
	char *string=(char *)malloc(sizeof(char)*digits);
	printf("enter number\n");
	scanf("%d",&number);
	sprintf(string,"%d",number);
	digitsInNumber=strlen(string);
	for(i=0;i<digitsInNumber;i++){
		printf("%c  ",string[i]);
	}
	return 0;
}
***********************************************************************************************Exercise 3.17***********************************************************************************************
#include <stdio.h>
int main(){
	int tanks=0;
	float miles,gallon,milesByGallon=0,average=0;
	do{
		printf("\nEnter the gallons used (-1 to end): ");
		scanf("%f",&gallon);
		if(gallon==-1)
			continue;
		printf("\nEnter the miles driven: ");
		scanf("%f",&miles);
		milesByGallon=miles/gallon;
		average+=milesByGallon;
		tanks++;
		printf("The miles / gallon for this tank was %f\n",milesByGallon);
	}while(gallon!=-1);
	average/=tanks;
	printf("The overall average miles/gallon was %f",average);
	return 0;
}
***********************************************************************************************Exercise 3.22***********************************************************************************************
#include <stdio.h>
int main(){
	int i=11,j=7;
	printf("i=%d\n",i);
	printf("i--=%d\n",i--);
	printf("i=%d\n",i);
	printf("j=%d\n",j);
	printf("--j=%d\n",--j);
	printf("j=%d\n",j);
	return 0;
}
***********************************************************************************************Exercise 3.24***********************************************************************************************
#include <stdio.h>
#include <stdlib.h>
#define numbersToReceive 10
float *getGreaterLowerNumber(float *numbers,int size){
	if(size==0)
		return NULL;
	float *greaterLowerNumber;
	int i;
	greaterLowerNumber=(float *)malloc(sizeof(float)*2);//this array contains number greater(index 0) and number lower index(1)
	*(greaterLowerNumber+0)=*(greaterLowerNumber+1)=*(numbers+0);
	for(i=0;i<size;i++){
		if(*(greaterLowerNumber+0)<*(numbers+i)){
			*(greaterLowerNumber+0)=*(numbers+i);//put as greater number
		}
		if(*(greaterLowerNumber+1)>*(numbers+i)){
			*(greaterLowerNumber+1)=*(numbers+i);//put as lower number
		}
	}
	return greaterLowerNumber;
}
void printFloatArray(float *numbers,int size,char separator){
	int i;
	for(i=0;i<size;i++){
		printf("%f%c",*(numbers+i),separator);
	}
}
int main(){
	float greaterNumber,*numbers=(float *)malloc(sizeof(float)*numbersToReceive);
	int i;
	printf("enter %d numbers\n",numbersToReceive);
	for(i=0;i<numbersToReceive;i++){
		scanf("%f",(numbers+i));
	}
	greaterNumber=getGreaterLowerNumber(numbers,numbersToReceive)[0];
	printf("list numbers ");
	printFloatArray(numbers,numbersToReceive,' ');
	printf("\ngreater number is %f\n",greaterNumber);
	return 0;
}
***********************************************************************************************Exercise 3.36***********************************************************************************************
#include <stdio.h>
#include <stdlib.h>//use for functions atoi
#include <string.h>//use for functions strlen 
#include <math.h>//use for functions pow
//compilar as gcc file.c -lm
#define sizeofBinaryString 11 
char isBinaryString(char *string){
	int i,size=strlen(string);
	for(i=0;i<size;i++){
		if(string[i]!='0'&&string[i]!='1')
			return 0;
	}
	return 1;
}
int binaryToDecimal(char *binaryString){
	if(!isBinaryString(binaryString)){
		printf("please enter a number binary this just containts 0 and 1\ntry again\n");
		return -1;
	}
	int i,potencia,decimal=0,size=strlen(binaryString);
	char aux;
	for(i=size-1,potencia=0;i>=0;i--,potencia++){
		aux=binaryString[i];
		decimal+=atoi(&aux)*pow(2,potencia);
	}
	return decimal;
}
int main(){
	char binaryString[sizeofBinaryString];
	int decimal;
	printf("enter binary number\n");
	fgets(binaryString,sizeofBinaryString,stdin);
	binaryString[strlen(binaryString)-1]=0;
	if(!isBinaryString(binaryString)){
		printf("please enter a number binary this just containts 0 and 1\ntry again\n");
		return -1;
	}
	decimal=binaryToDecimal(binaryString);
	printf("%s (binary)=%d (decimal)\n",binaryString,decimal);
	return 0;
}
***********************************************************************************************Exercise 3.40***********************************************************************************************
#include <stdio.h>
#include <stdlib.h>
#define rows 8
#define columns 8
int main(){
	int i;
	char *string=(char*)malloc(sizeof(char)*(columns*2));
	for(i=0;i<columns*2;i+=2){
		string[i]='*';
		string[i+1]=' ';
	}
	for(i=1;i<=rows;i++){
		if(i%2){
			printf(" ");
		}
		printf("%s\n",string);
	}
	return 0;
}
***********************************************************************************************Exercise 3.41***********************************************************************************************
#include <stdio.h>
/*
	cuando se ejecuta este programa 
	se imprimen los multiplos de dos hazta que el multiplo sea menor que el numero maximo que cabe en el tipo de variable
	una vez alcanzado este numero imprimira puros ceros
	ejemplo en este programa se usa una variable de tipo int para almacenar el multiplo
	savemos que un int en linux ocupa 4 bytes entonces el numero mas grande a almacenar es 2^32-1 
	una ves que el multiplo revace 2^32-1 imprimira puros 0
*/
int main(){
	int multiplo=2;
	while(1){
		printf("%d ",multiplo);
		multiplo*=2;
	}
	return 0;
}
***********************************************************************************************Exercise 3.47 a)***********************************************************************************************
#include <stdio.h>
double factorial(unsigned char number){
	double factorial=1;
	while(number>=1){
		factorial*=number--;
	}
	return factorial;
}
int main(){
	unsigned char number;
	printf("enter number less than 170 but great that -1\n");
	scanf("%d",(int *)&number);
	printf("%d!=%g\n",number,factorial(number));
	return 0;
}
***********************************************************************************************Exercise 3.47 b)***********************************************************************************************
/*
	this program estima constant e utilizando formula
	e=1+1/1!+1/2!+1/3!+...
*/
#include <stdio.h>
double factorial(unsigned char number){
	double factorial=1;
	while(number>=1){
		factorial*=number--;
	}
	return factorial;
}
double getEulerNumber(){
	double eulerNumber=0;
	unsigned char number=0;
	while(number<170)
		eulerNumber+=1/factorial(number++);
	return eulerNumber;
}
int main(){
	printf("number euler=%g\n",getEulerNumber());
	return 0;
}

***********************************************************************************************Exercise 3.47 c)***********************************************************************************************
/*
	this program estima constant e utilizando formula
	e=1+x/1!+x^2/2!+x^3/3!+...
*/
#include <stdio.h>
#include <math.h>
//compilar as gcc file.c -lm
double factorial(unsigned char number){
	double factorial=1;
	while(number>=1){
		factorial*=number--;
	}
	return factorial;
}
double getEulerNumber(float potencia){
	double eulerNumber=0;
	unsigned char number=0;
	while((number++)<170)
		eulerNumber+=(pow(potencia,number-1)/factorial(number-1));
	return eulerNumber;
}
int main(){
	float potencia;
	printf("i calculator e^x\nplese enter value of x\n");
	scanf("%f",&potencia);
	printf("e^%g=%g\n",potencia,getEulerNumber(potencia));
	return 0;
}
***********************************************************************************************Exercise 4.10***********************************************************************************************
/*
	this program calcula average of numbers entered by keyboard but just with numbers that preceden of last number entered
	example
	4 2 8 10 9
	response 4+2+8/3 =4.666
	not take in cuenta 10 becose not precede that 9 
*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>//use for functions realloc
void printFloatArray(float *array,int size,char separator){
	int i;
	for(i=0;i<size;i++){
		printf("%g%c",*(array+i),separator);
	}
}
int main(){
	float *numbers=(float *)malloc(sizeof(float)),average=0;
	int i,numbersEntered=0,numbersPreceden=0;
	char option[3];
	do{
		printf("would you like insert other number? yes/not\n");
		scanf("%s",option);
		if(strncasecmp(option,"y",1))
			continue;
		printf("enter number\n");
		scanf("%f",(numbers+(numbersEntered)));
		numbersEntered++;
		numbers=(float *)realloc(numbers,sizeof(float)*(numbersEntered+1));
	}while(strncasecmp(option,"n",1));
	printFloatArray(numbers,numbersEntered,' ');
	for(i=0,numbersPreceden=0;i<numbersEntered-1;i++){
		if(*(numbers+i)<*(numbers+(numbersEntered-1))){
			average+=*(numbers+i);
			numbersPreceden++;
		}
	}
	if(average!=0)
		average/=numbersPreceden;
	printf("\naverage of numbers that precede of %g=%g\n",*(numbers+(numbersEntered-1)),average);
	return 0;
}
***********************************************************************************************Exercise 4.13***********************************************************************************************
/*
	calcula and print the product the integers impares of 1 to 15
*/
#include <stdio.h>
#define limitUp 15
#define limitDown 1
int main(){
	int i,product=1;
	for(i=limitDown;i<=limitUp;i++){
		if(i%2!=0)
			product*=i;
	}
	printf("product of impares %d-%d is %d\n",limitDown,limitUp,product);
	return 0;
}
***********************************************************************************************Exercise 4.16 a)***********************************************************************************************
#include <stdio.h>
#define columns 10
int main(){
	int c;
	int i=1;
	for(c=0;c<columns;c++){
		for(i=0;i<=c;i++){
			printf("*");
		}
		printf("\n");
	}
	return 0;
}
***********************************************************************************************Exercise 4.16 b)***********************************************************************************************
#include <stdio.h>
#define columns 10
int main(){
	int c;
	int i=1;
	for(c=columns;c>0;c--){
		for(i=c;i>0;i--){
			printf("*");
		}
		printf("\n");
	}
	return 0;
}
***********************************************************************************************Exercise 4.16 c)***********************************************************************************************
#include <stdio.h>
#define columns 10
int main(){
	int c;
	int i,j;
	for(c=columns;c>0;c--){
		for(j=0;j<columns-c;j++)
			printf(" ");
		for(i=c;i>0;i--)
			printf("*");
		printf("\n");
	}
	return 0;
}
***********************************************************************************************Exercise 4.16 d)***********************************************************************************************
#include <stdio.h>
#define columns 10
int main(){
	int c;
	int i,j;
	for(c=1;c<=columns;c++){
		for(j=0;j<columns-c;j++)
			printf(" ");
		for(i=0;i<c;i++)
			printf("*");
		printf("\n");
	}
	return 0;
}
***********************************************************************************************Exercise 4.19***********************************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define numbersProducts 5
typedef struct product{
	int id,amountSale;
	float menudeoPrice;
}product;
product *products;
void startProducts(){
	products=(product*)malloc(sizeof(product)*numbersProducts);
	products[0].id=1;
	products[0].menudeoPrice=2.98;
	products[0].amountSale=0;
	products[1].id=2;
	products[1].menudeoPrice=4.50;
	products[1].amountSale=0;
	products[2].id=3;
	products[2].menudeoPrice=9.98;
	products[2].amountSale=0;
	products[3].id=4;
	products[3].menudeoPrice=4.49;
	products[3].amountSale=0;
	products[4].id=5;
	products[4].menudeoPrice=6.87;
	products[4].amountSale=0;
}
int main(){
	startProducts();
	int idProduct,amountSale,indexProduct;
	char option[3];
	do{
		printf("would you like insert other product? yes/not\n");
		scanf("%s",option);
		if(strncasecmp(option,"y",1))
			continue;
		printf("number product\n");
		scanf("%d",&idProduct);
		switch(idProduct){
			case 1:
				indexProduct=0;
			break;
			case 2:
				indexProduct=1;
			break;
			case 3:
				indexProduct=2;
			break;
			case 4:
				indexProduct=3;
			break;
			case 5:
				indexProduct=4;
			break;
		}
		printf("amount sale in day\n");
		scanf("%d",&amountSale);
		products[indexProduct].amountSale+=amountSale;
	}while(strncasecmp(option,"n",1));
	for(indexProduct=0;indexProduct<numbersProducts;indexProduct++)
		printf("product %d, menudeo price=%g, amount sale %d, total=%g\n",products[indexProduct].id,products[indexProduct].menudeoPrice,products[indexProduct].amountSale,products[indexProduct].amountSale*products[indexProduct].menudeoPrice);
	return 0;
}
***********************************************************************************************Exercise 4.26***********************************************************************************************
#include <stdio.h>
#include <unistd.h>
#define maxIteraciones 144839
/*
	3.14 en el termino 119
	3.141 en el termino 1688
	3.1415 en el termino 10742
	3.14159 en el terminino 144839
*/
int main(){
	double pi=0,div;
	int number,iteracion;//iteracion just increment wen number is impar and number increment always
	char signo=1;
	for(number=1,iteracion=0;iteracion<=maxIteraciones;number++){
		if(number%2){
			div=(float)4/number;
			div=div*signo;
			pi+=div;
			signo=signo-signo*2;
			iteracion++;
			printf("pi=%f a %d iteracion\n",pi,iteracion);
		}
	}
	return 0;
}
***********************************************************************************************Exercise 4.31***********************************************************************************************
#include <stdio.h>
#define diameter 9//this number always shuld integer impar
int main(){
	int spacesToPrint,characteresToPrint;
	int cp,sp,flatCharacteres=2,flatSpaces=-1;//cp characteres printed, sp spaces printed
	for(characteresToPrint=1,spacesToPrint=diameter/2;		 characteresToPrint>0		 ;spacesToPrint+=flatSpaces,characteresToPrint+=flatCharacteres){
		for(sp=1;sp<=spacesToPrint;sp++)
			printf(" ");
		for(cp=1;cp<=characteresToPrint;cp++)
			printf("*");
		if(characteresToPrint==diameter){
			flatCharacteres=-2;
			flatSpaces=1;
		}
		printf("\n");
	}
	return 0;
}
***********************************************************************************************Exercise 5.17***********************************************************************************************
#include <stdio.h>
#include <string.h>
char multiple(int first,int second){
	if(first%second)
		return 1;
	return 0;
}
int main(){
	int first,second;
	char option[3];
	do{
		printf("would you like insert other brute sale? yes/not\n");
		scanf("%s",option);
		if(strncasecmp(option,"y",1))
			continue;
		printf("enter first number\n");
		scanf("%d",&first);
		printf("enter second number\n");
		scanf("%d",&second);
		if(multiple(first,second))
			printf("%d is multiple of %d\n",second,first);
		else
			printf("%d not is multiple of %d\n",second,first);
	}while(strncasecmp(option,"n",1));
	return 0;
}
***********************************************************************************************Exercise 5.18***********************************************************************************************
#include <stdio.h>
#include <stdlib.h>//for use functions realloc
#include <string.h>
char even(int number){
	if(!(number%2))
		return 1;
	return 0;
}
int main(){
	int *numbers,i,numbersEntered=1;
	char option[3];
	do{
		printf("would you like insert other brute sale? yes/not\n");
		scanf("%s",option);
		if(strncasecmp(option,"y",1))
			continue;
		numbers=(int*)realloc(numbers,sizeof(int)*numbersEntered);
		printf("enter number\n");
		scanf("%d",(numbers+numbersEntered-1));
		numbersEntered++;
	}while(strncasecmp(option,"n",1));
	for(i=0;i<numbersEntered-1;i++){
		if(even(*(numbers+i)))
			printf("%d is par\n",*(numbers+i));
		else
			printf("%d is impar\n",*(numbers+i));
	}
	return 0;
}
***********************************************************************************************Exercise 5.19***********************************************************************************************
#include <stdio.h>
int main(){
	int side,r,c;//r rows, c colums
	printf("enter side value(integer)\n");
	scanf("%d",&side);
	for(r=0;r<side;r++){
		for(c=0;c<side;c++){
			printf("*");
		}
		printf("\n");
	}
	return 0;
}
***********************************************************************************************Exercise 5.28***********************************************************************************************
#include <stdio.h>
#include <string.h>//for use functions strlen
int invertInteger(int number){
	int invertido,i,j;
	char aux[11],temp[11];
	bzero(temp,11);
	sprintf(aux,"%d",number);
	for(i=strlen(aux)-1,j=0;i>=0;i--,j++)
		temp[j]=aux[i];
	sscanf(temp,"%d",&invertido);
	return invertido;
}
int main(){
	int number;
	printf("enter a number\n");
	scanf("%d",&number);
	printf("%d inverter %d\n",number,invertInteger(number));
	return 0;
}
***********************************************************************************************Exercise 6.10***********************************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define salaryWeek 200
#define percentWeek 9
char wasInThisRanger(int number,int limitDown,int limitUp){
	if(number>=limitDown&&number<=limitUp)
		return 1;
	return 0;
}
void printAmount(int *fullSalary,int size){
	int i,amount,limitDown,limitUp;
	for(limitDown=200,limitUp=limitDown+99;limitDown<=1000;limitDown+=100,amount=0){
		if((limitUp=limitDown+99)==1099)
			limitUp=2147483647;
		for(i=0;i<size;i++){
			if(wasInThisRanger(*(fullSalary+i),limitDown,limitUp))
				amount++;
		}
		if(limitDown==1000)
			printf("%d employer was in ranger $%d-superior\n",amount,limitDown);
		else
			printf("%d employer was in ranger $%d-$%d\n",amount,limitDown,limitUp);
	}
}
int main(){
	float bruteSale;
	int entered=1,*fullSalary=(int*)malloc(sizeof(int));
	char option[3];
	do{
		printf("would you like insert other brute sale? yes/not\n");
		scanf("%s",option);
		if(strncasecmp(option,"y",1))
			continue;
		printf("enter brute sales\n");
		scanf("%f",&bruteSale);
		*(fullSalary+entered-1)=(int)(salaryWeek+(bruteSale*percentWeek/100));
		printf("fullSalary for this employer=%d\n",*(fullSalary+entered-1));
		entered++;
		fullSalary=(int*)realloc(fullSalary,(sizeof(int)*entered));
	}while(strncasecmp(option,"n",1));
	printAmount(fullSalary,entered-1);
	return 0;
}
***********************************************************************************************Exercise 6.15***********************************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define numbersToRecive 20
char containsInteger(int *array,int size,int number){
	int i;
	for(i=0;i<size;i++){
		if(*(array+i)==number)
			return 1;
	}
	return 0;
}
int main(){
	int i,entered=1,aux,*numbers=(int*)malloc(sizeof(int));
	for(i=0;i<numbersToRecive;i++){
		printf("enter number\n");
		scanf("%d",&aux);
		if(containsInteger(numbers,entered-1,aux))
			continue;
		*(numbers+entered-1)=aux;
		printf("%d added\n",aux);
		entered++;
		numbers=(int*)realloc(numbers,(sizeof(int)*entered));
	}
	printf("numbers in list\n");
	for(i=0;i<entered-1;i++)
		printf("%d ",*(numbers+i));
	return 0;
}
***********************************************************************************************Exercise 5.17 with apuntadores*************************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
char multiple(int *first,int *second){
	if(*first%*second)
		return 1;
	return 0;
}
int main(){
	int *first=(int*)malloc(sizeof(int)),*second=(int*)malloc(sizeof(int));
	char *option=(char *)malloc(sizeof(char)*3);
	do{
		printf("would you like insert other brute sale? yes/not\n");
		scanf("%s",option);
		if(strncasecmp(option,"y",1))
			continue;
		printf("enter first number\n");
		scanf("%d",first);
		printf("enter second number\n");
		scanf("%d",second);
		if(multiple(first,second))
			printf("%d is multiple of %d\n",*second,*first);
		else
			printf("%d not is multiple of %d\n",*second,*first);
	}while(strncasecmp(option,"n",1));
	return 0;
}
***********************************************************************************************Exercise 5.18 with apuntadores*************************************************************************************
#include <stdio.h>
#include <stdlib.h>//for use functions realloc
#include <string.h>
char even(int *number){
	if(!(*number%2))
		return 1;
	return 0;
}
int main(){
	int *numbers,*i,*numbersEntered;
	i=(int*)malloc(sizeof(int));
	numbersEntered=(int*)malloc(sizeof(int));
	*numbersEntered=1;
	char *option=(char *)malloc(sizeof(char)*3);
	do{
		printf("would you like insert other brute sale? yes/not\n");
		scanf("%s",option);
		if(strncasecmp(option,"y",1))
			continue;
		numbers=(int*)realloc(numbers,sizeof(int)*(*numbersEntered));
		printf("enter number\n");
		scanf("%d",(numbers+*numbersEntered-1));
		*numbersEntered=*numbersEntered+1;
	}while(strncasecmp(option,"n",1));
	for(*i=0;*i<(*numbersEntered)-1;*i=*i+1){
		if(even((numbers+(*i))))
			printf("%d is par\n",*(numbers+(*i)));
		else
			printf("%d is impar\n",*(numbers+(*i)));
	}
	return 0;
}
***********************************************************************************************Exercise 5.19 with apuntadores*************************************************************************************
#include <stdio.h>
#include <stdlib.h>
int main(){
	int *side,*r,*c;//r rows, c colums
	side=(int*)malloc(sizeof(int));
	r=(int*)malloc(sizeof(int));
	c=(int*)malloc(sizeof(int));
	printf("enter side value(integer)\n");
	scanf("%d",side);
	for(*r=0;*r<*side;*r=*r+1){
		for(*c=0;*c<*side;*c=*c+1){
			printf("*");
		}
		printf("\n");
	}
	return 0;
}
***********************************************************************************************Exercise 5.28 with apuntadores*************************************************************************************
#include <stdio.h>
#include <string.h>//for use functions strlen
#include <stdlib.h>
int *invertInteger(int *number){
	int *invertido,*i,*j;
	invertido=(int*)malloc(sizeof(int));
	i=(int*)malloc(sizeof(int));
	j=(int*)malloc(sizeof(int));
	char *aux,*temp;
	aux=(char*)malloc(sizeof(char)*11);
	temp=(char*)malloc(sizeof(char)*11);
	bzero(temp,11);
	sprintf(aux,"%d",*number);
	for(*i=strlen(aux)-1,*j=0;*i>=0;*i=*i-1,*j=*j+1)
		temp[*j]=aux[*i];
	sscanf(temp,"%d",invertido);
	return invertido;
}
int main(){
	int *number=(int*)malloc(sizeof(int));
	printf("enter a number\n");
	scanf("%d",number);
	printf("%d inverter %d\n",*number,*invertInteger(number));
	return 0;
}
***********************************************************************************************Exercise 6.10 with apuntadores*************************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define salaryWeek 200
#define percentWeek 9
char wasInThisRanger(int number,int limitDown,int limitUp){
	if(number>=limitDown&&number<=limitUp)
		return 1;
	return 0;
}
void printAmount(int *fullSalary,int size){
	int *i,*amount,*limitDown,*limitUp;
	i=(int*)malloc(sizeof(int));
	amount=(int*)malloc(sizeof(int));
	limitDown=(int*)malloc(sizeof(int));
	limitUp=(int*)malloc(sizeof(int));
	for(*limitDown=200,*limitUp=*limitDown+99;*limitDown<=1000;*limitDown+=100,*amount=0){
		if((*limitUp=*limitDown+99)==1099)
			*limitUp=2147483647;
		for(*i=0;*i<size;*i=*i+1){
			if(wasInThisRanger(*(fullSalary+(*i)),*limitDown,*limitUp))
				*amount=*amount+1;
		}
		if(*limitDown==1000)
			printf("%d employer was in ranger $%d-superior\n",*amount,*limitDown);
		else
			printf("%d employer was in ranger $%d-$%d\n",*amount,*limitDown,*limitUp);
	}
}
int main(){
	float *bruteSale;
	bruteSale=(float *)malloc(sizeof(float));
	int *entered,*fullSalary=(int*)malloc(sizeof(int));
	entered=(int *)malloc(sizeof(int));
	*entered=1;
	char *option;
	option=(char*)malloc(sizeof(char));
	do{
		printf("would you like insert other brute sale? yes/not\n");
		scanf("%s",option);
		if(strncasecmp(option,"y",1))
			continue;
		printf("enter brute sales\n");
		scanf("%f",bruteSale);
		*(fullSalary+*entered-1)=(int)(salaryWeek+((*bruteSale)*percentWeek/100));
		printf("fullSalary for this employer=%d\n",*(fullSalary+*entered-1));
		*entered=*entered+1;
		fullSalary=(int*)realloc(fullSalary,(sizeof(int)*(*entered)));
	}while(strncasecmp(option,"n",1));
	printAmount(fullSalary,(*entered)-1);
	return 0;
}
***********************************************************************************************Exercise 6.15 with apuntadores*************************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define numbersToRecive 20
char containsInteger(int *array,int size,int number){
	int *i;
	i=(int *)malloc(sizeof(int));
	for(*i=0;*i<size;*i=*i+1){
		if(*(array+(*i))==number)
			return 1;
	}
	return 0;
}
int main(){
	int *i,*entered,*aux,*numbers=(int*)malloc(sizeof(int));
	i=(int *)malloc(sizeof(int));
	entered=(int *)malloc(sizeof(int));
	aux=(int *)malloc(sizeof(int));
	*entered=1;
	for(*i=0;*i<numbersToRecive;*i=*i+1){
		printf("enter number\n");
		scanf("%d",aux);
		if(containsInteger(numbers,*entered-1,*aux))
			continue;
		*(numbers+*entered-1)=*aux;
		printf("%d added\n",*aux);
		*entered=*entered+1;
		numbers=(int*)realloc(numbers,(sizeof(int)*(*entered)));
	}
	printf("numbers in list\n");
	for(*i=0;*i<*entered-1;*i=*i+1)
		printf("%d ",*(numbers+(*i)));
	return 0;
}
